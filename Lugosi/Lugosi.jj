PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

class ArvoreLugosi{
  ArrayList<Comando> comandos;

  ArvoreLugosi(ArrayList comandos)
  {this.comandos=comandos;}
}

class Comando{}

class Atrib extends Comando{
   String tipo;
   String id;
   Exp exp = null;

   Atrib (String tipo, String id)
   {
    this.tipo=tipo;
    this.id=id;
    this.exp=null;
   }

   public String toString() {
     return this.tipo + " " + this.id + " := ";
   }
}

class Exp{}

class Num extends Exp{
  int num;

  Num(int num)
  {this.num = num;}
}

class Var extends Exp{
  String var;

  Var(String var)
  {this.var=var;}
}


public class Lugosi {

  public static void main(String args[]) throws Exception {

    FileInputStream fs = new FileInputStream(new File(args[0]));

    Lugosi parser = new Lugosi(fs);

    ArvoreLugosi arvore = parser.Lugosi();

    geraCodigo(arvore, args[0]);

    }

  public static void geraCodigo(ArvoreLugosi prog, String arquivo){
    System.out.println("main(){");
    for (Comando c : prog.comandos) {
      System.out.print("Comando: ");
      System.out.println(c);
    }
    System.out.println("}");

    }
}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <PONTOVIRGULA: ";">
| <VIRGULA: ",">
| <ATRIB: ":=">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VAR: "var">
| <INT: "int">
| <BOOL: "bool">
| <FLOAT: "float">
| <VOID: "void">
| <TRUE: "true">
| <FALSE: "false">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <FUNC: "function">
| <RETURN: "return">
| <PRINT: "print">
}

TOKEN :
{
   <NUM : (["0"-"9"])+ ("."(["0"-"9"])+)? ("E" ("+" | "-")? (["0"-"9"])+)?>
 | <ID: (["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_" (["a"-"z","A"-"Z","0"-"9"])+)*)>
 | <OP: "+" | "-" | "*" |  "/" | "&&" | "||" | "<" | ">" | "==">

}

// LUGOSI -> MAIN FUNC?

ArvoreLugosi Lugosi () :
{ArrayList comandos= new ArrayList();}
{
  Main(comandos)
// (Func ()) ?
  <EOF> 
  {return new ArvoreLugosi(comandos);}
}

// MAIN -> "main" "{" VARDECL SEQCOMANDOS "}"

void Main (ArrayList comandos) :
{}
{
  <MAIN> <ACHAVES> Vardecl (comandos) SeqComandos () <FCHAVES>
}

// TIPO -> "int" | "bool" | "float" | "void"
String Tipo () :
{Token tipo=null;}
{
  (tipo=<INT> | tipo=<BOOL> | tipo=<FLOAT> | tipo=<VOID>)
  {return tipo.image;}
}

// VARDECL -> VARDECL "var" TIPO TOKEN_id ";" | vazio
void Vardecl (ArrayList comandos) :
{String tipo; Token id=null; Atrib c;}
{
  <VAR> tipo=Tipo() id=<ID> {c = new Atrib(tipo, id.image);} <PONTOVIRGULA> Vardecl2 (comandos)
  {comandos.add(c);}
} 

void Vardecl2 (ArrayList comandos) :
{String tipo; Token id=null; Atrib c;}
{
  (<VAR> tipo=Tipo() id=<ID> {c = new Atrib(tipo, id.image);} 
  {comandos.add(c);} <PONTOVIRGULA> Vardecl2 (comandos)) | ({})
} 


// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
void SeqComandos () :
{}
{
  Comando () SeqComandos () | {}
}

// COMANDO -> TOKEN_id ":=" EXP ";"
// | TOKEN_id "(" LISTAEXP? ")" ";"
// | "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
// | "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}" ";"
// | "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")" ";"
// | "return" EXP ";"
// | "print" "(" EXP ")" ";"
void Comando () :
{}
{
  <ID> Comando2 () |
  <IF> <APARENTESES> Exp () <FPARENTESES> <ACHAVES> SeqComandos () <FCHAVES> <PONTOVIRGULA> |
  <WHILE> <APARENTESES> Exp () <FPARENTESES> <ACHAVES> SeqComandos () <FCHAVES> <PONTOVIRGULA> |
  <DO> <ACHAVES> SeqComandos () <FCHAVES> <WHILE> <APARENTESES> Exp () <FPARENTESES> <PONTOVIRGULA> |
  <RETURN> Exp () <PONTOVIRGULA> |
  <PRINT> <APARENTESES> Exp () <FPARENTESES> <PONTOVIRGULA>
}

void Comando2 () :
{}
{
  <ATRIB> Exp () <PONTOVIRGULA> |
  <APARENTESES> ListaExp () <FPARENTESES> <PONTOVIRGULA>
}

// EXP -> "(" EXP OP EXP ")" | FATOR
void Exp () :
{}
{
  <APARENTESES> Exp () <OP> Exp () <FPARENTESES> | Fator ()
}

// FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
// | TOKEN_numliteral | "true" | "false"
void Fator () :
{}
{
  <NUM> | <ID> Fator2 () | <TRUE> | <FALSE>
}

void Fator2 ():
{}
{
  <APARENTESES> ListaExp () <FPARENTESES> | {}
}

// LISTAEXP -> EXP | LISTAEXP "," EXP
void ListaExp () :
{}
{
  Exp () ListaExp2 ()
}

void ListaExp2 () :
{}
{
  <VIRGULA> Exp () ListaExp2 () | {}
}

// FUNC -> FUNC "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// void Func () :
// {}
// {
//   <FUNC> Tipo () <ID> <APARENTESES> ListaArg () <FPARENTESES> <ACHAVES> 
//   Vardecl () SeqComandos () <FCHAVES> Func2 ()
// }

// void Func2 () :
// {}
// {
//   <FUNC> Tipo () <ID> <APARENTESES> ListaArg () <FPARENTESES> <ACHAVES> 
//   Vardecl () SeqComandos () <FCHAVES> Func2 () | {}
// }


// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
void ListaArg () :
{}
{
  Tipo () <ID> ListaArg2 () 
}

void ListaArg2 () :
{}
{
  <VIRGULA>  Tipo () <ID> ListaArg2 () | {}
}