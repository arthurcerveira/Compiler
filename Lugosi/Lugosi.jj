PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

class ArvoreLugosi{
  ArrayList<Comando> comandos;

  ArvoreLugosi(ArrayList comandos)
  {this.comandos=comandos;}
}

class Comando{}

class VarDecl extends Comando{
   String tipo;
   String id;

   VarDecl (String tipo, String id)
   {
    this.tipo=tipo;
    this.id=id;
   }

   public String toString() {
     return this.tipo + " " + this.id + ";";
   }
}

class Atrib extends Comando{
   String id;
   Exp exp = null;

   Atrib (String id, Exp exp)
   {
    this.id=id;
    this.exp=exp;
   }

   public String toString() {
     return this.id + " = " + this.exp + ";";
   }
}

class Exp{}

class Op extends Exp{
  String op;
  Exp e1;
  Exp e2;

  Op (String op, Exp e1, Exp e2)
  {
    this.op=op;
    this.e1=e1;
    this.e2=e2;
  }

  public String toString() {
    return "(" + this.e1 + " " + this.op + " " + this.e2 + ")";
  }
}

class Num extends Exp{
  float num;

  Num(float num)
  {this.num = num;}

  public String toString() {
     return Float.toString(this.num);
   }
}

class Bool extends Exp{
  boolean b;

  Bool(boolean b)
  {this.b = b;}

  public String toString() {
     return this.b
        ? "true"
        : "false";
   }
}

class Var extends Exp{
  String var;

  Var(String var)
  {this.var=var;}

  public String toString() {
     return this.var;
   }
}

class ListaExp extends Exp{
  ArrayList<Exp> exps;

  ListaExp(ArrayList exps)
  {this.exps=exps;}

  public String toString() {
      String s = "(";
      
      for (Exp e : this.exps) {
        s += e.toString() + ",";
      }
      
      return s.substring(0, s.length() - 1) + ")";
   }
}

class funcaoChamada extends Exp {
  String id;
  ListaExp exps;

  funcaoChamada(String id, ListaExp exps)
  {
    this.id=id;
    this.exps=exps;
  }

  public String toString() {
     return this.id + this.exps;
   }
}

public class Lugosi {

  public static void main(String args[]) throws Exception {

    FileInputStream fs = new FileInputStream(new File(args[0]));

    Lugosi parser = new Lugosi(fs);

    ArvoreLugosi arvore = parser.Lugosi();

    geraCodigo(arvore, args[0]);

    }

  public static void geraCodigo(ArvoreLugosi prog, String arquivo){
    System.out.println("main(){");
    for (Comando c : prog.comandos) {
      System.out.print("Comando: ");
      System.out.println(c);
    }
    System.out.println("}");

    }
}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <PONTOVIRGULA: ";">
| <VIRGULA: ",">
| <ATRIB: ":=">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VAR: "var">
| <INT: "int">
| <BOOL: "bool">
| <FLOAT: "float">
| <VOID: "void">
| <TRUE: "true">
| <FALSE: "false">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <FUNC: "function">
| <RETURN: "return">
| <PRINT: "print">
}

TOKEN :
{
   <NUM : (["0"-"9"])+ ("."(["0"-"9"])+)? ("E" ("+" | "-")? (["0"-"9"])+)?>
 | <ID: (["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_" (["a"-"z","A"-"Z","0"-"9"])+)*)>
 | <OP: "+" | "-" | "*" |  "/" | "&&" | "||" | "<" | ">" | "==">

}

// LUGOSI -> MAIN FUNC?

ArvoreLugosi Lugosi () :
{ArrayList comandos= new ArrayList();}
{
  Main(comandos)
// (Func ()) ?
  <EOF> 
  {return new ArvoreLugosi(comandos);}
}

// MAIN -> "main" "{" VARDECL SEQCOMANDOS "}"

void Main (ArrayList comandos) :
{}
{
  <MAIN> <ACHAVES> Vardecl (comandos) SeqComandos (comandos) <FCHAVES>
}

// TIPO -> "int" | "bool" | "float" | "void"
String Tipo () :
{Token tipo=null;}
{
  (tipo=<INT> | tipo=<BOOL> | tipo=<FLOAT> | tipo=<VOID>)
  {return tipo.image;}
}

// VARDECL -> VARDECL "var" TIPO TOKEN_id ";" | vazio
void Vardecl (ArrayList comandos) :
{String tipo; Token id=null; VarDecl vd;}
{
  <VAR> tipo=Tipo() id=<ID> {vd = new VarDecl(tipo, id.image);} <PONTOVIRGULA> Vardecl2 (comandos)
  {comandos.add(vd);}
} 

void Vardecl2 (ArrayList comandos) :
{String tipo; Token id=null; VarDecl vd;}
{
  (<VAR> tipo=Tipo() id=<ID> {vd = new VarDecl(tipo, id.image);} 
  {comandos.add(vd);} <PONTOVIRGULA> Vardecl2 (comandos)) | ({})
} 


// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
void SeqComandos (ArrayList comandos) :
{}
{
  Comando (comandos) SeqComandos (comandos) | {}
}

// COMANDO -> TOKEN_id ":=" EXP ";"
// | TOKEN_id "(" LISTAEXP? ")" ";"
// | "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
// | "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}" ";"
// | "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")" ";"
// | "return" EXP ";"
// | "print" "(" EXP ")" ";"
void Comando (ArrayList comandos) :
{Comando c=null; Token id=null; Exp exp=null; ArrayList listaexp=new ArrayList();}
{
  (id=<ID> c = Comando2 (id.image) |
  <IF> <APARENTESES> Exp () <FPARENTESES> <ACHAVES> SeqComandos (comandos) <FCHAVES> <PONTOVIRGULA> |
  <WHILE> <APARENTESES> Exp () <FPARENTESES> <ACHAVES> SeqComandos (comandos) <FCHAVES> <PONTOVIRGULA> |
  <DO> <ACHAVES> SeqComandos (comandos) <FCHAVES> <WHILE> <APARENTESES> Exp () <FPARENTESES> <PONTOVIRGULA> |
  <RETURN> Exp () <PONTOVIRGULA> |
  <PRINT> <APARENTESES> Exp () <FPARENTESES> <PONTOVIRGULA>)
  {comandos.add(c);}
}

Comando Comando2 (String id) :
{Comando c=null;Exp e = null;}
{
  (<ATRIB> (e = Exp ()) <PONTOVIRGULA>  {c = new Atrib (id, e);}|
  <APARENTESES> ListaExp () <FPARENTESES> <PONTOVIRGULA>)
  {return c;}
}

// EXP -> "(" EXP OP EXP ")" | FATOR
Exp Exp () :
{Exp e=null; Exp e1=null; Exp e2=null;Token op=null;}
{
  (<APARENTESES> e1=Exp () op=<OP> e2=Exp () <FPARENTESES> {e = new Op(op.image, e1, e2);}| e=Fator ())
  {return e;}
}

// FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
// | TOKEN_numliteral | "true" | "false"
Exp Fator () :
{Exp e=null; Token t=null; ListaExp le=null;}
{
  ( t=<NUM> {e = new Num(Float.parseFloat(t.image));}
  | t=<ID> le = Fator2 () {e = new funcaoChamada(t.image, le);}
  | t=<TRUE> {e = new Bool(true);}
  | t=<FALSE> {e = new Bool(false);})
  {return e;}
}

ListaExp Fator2 ():
{ListaExp le=null; }
{
  (<APARENTESES> le = ListaExp () <FPARENTESES> | {})
  {return le;}
}

// LISTAEXP -> EXP | LISTAEXP "," EXP
ListaExp ListaExp () :
{ArrayList exps=new ArrayList(); Exp e=null;}
{
  e = Exp () {exps.add(e);} ListaExp2 (exps)
  {return new ListaExp(exps);}
}

void ListaExp2 (ArrayList exps) :
{Exp e=null;}
{
  <VIRGULA> e = Exp () {exps.add(e);} ListaExp2 (exps) | {}
}

// FUNC -> FUNC "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// void Func () :
// {}
// {
//   <FUNC> Tipo () <ID> <APARENTESES> ListaArg () <FPARENTESES> <ACHAVES> 
//   Vardecl () SeqComandos (comandos) <FCHAVES> Func2 ()
// }

// void Func2 () :
// {}
// {
//   <FUNC> Tipo () <ID> <APARENTESES> ListaArg () <FPARENTESES> <ACHAVES> 
//   Vardecl () SeqComandos (comandos) <FCHAVES> Func2 () | {}
// }


// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
void ListaArg () :
{}
{
  Tipo () <ID> ListaArg2 () 
}

void ListaArg2 () :
{}
{
  <VIRGULA>  Tipo () <ID> ListaArg2 () | {}
}