PARSER_BEGIN(Lugosi)
import java.io.*;
public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
 Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
 analisador.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <PONTOVIRGULA: ";">
| <VIRGULA: ",">
| <ATRIB: ":=">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VAR: "var">
| <INT: "int">
| <BOOL: "bool">
| <FLOAT: "float">
| <VOID: "void">
| <TRUE: "true">
| <FALSE: "false">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <FUNC: "function">
| <RETURN: "return">
| <PRINT: "print">
}

TOKEN :
{
   <NUM : (["0"-"9"])+ ("."(["0"-"9"])+)? ("E" ("+" | "-")? (["0"-"9"])+)?>
 | <ID: (["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_" (["a"-"z","A"-"Z","0"-"9"])+)*)>
 | <OP: "+" | "-" | "*" |  "/" | "&&" | "||" | "<" | ">" | "==">

}

// LUGOSI -> MAIN FUNC?

void Lugosi () :
{}
{
  Main()
  (Func ()) ?
  <EOF> 
}

// MAIN -> "main" "{" VARDECL SEQCOMANDOS "}"

void Main () :
{}
{
  <MAIN> <ACHAVES> Vardecl () SeqComandos () <FCHAVES>
}

// TIPO -> "int" | "bool" | "float" | "void"
void Tipo () :
{}
{
  <INT> | <BOOL> | <FLOAT> | <VOID>
}

// VARDECL -> VARDECL "var" TIPO TOKEN_id ";" | vazio
void Vardecl () :
{}
{
  <VAR> Tipo() <ID> <PONTOVIRGULA> Vardecl2 ()
} 

void Vardecl2 () :
{}
{
  <VAR> Tipo() <ID> <PONTOVIRGULA> Vardecl2 () | {}
} 


// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
void SeqComandos () :
{}
{
  Comando () SeqComandos () | {}
}

// COMANDO -> TOKEN_id ":=" EXP ";"
// | TOKEN_id "(" LISTAEXP? ")" ";"
// | "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
// | "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}" ";"
// | "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")" ";"
// | "return" EXP ";"
// | "print" "(" EXP ")" ";"
void Comando () :
{}
{
  <ID> Comando2 () |
  <IF> <APARENTESES> Exp () <FPARENTESES> <ACHAVES> SeqComandos () <FCHAVES> <PONTOVIRGULA> |
  <WHILE> <APARENTESES> Exp () <FPARENTESES> <ACHAVES> SeqComandos () <FCHAVES> <PONTOVIRGULA> |
  <DO> <ACHAVES> SeqComandos () <FCHAVES> <WHILE> <APARENTESES> Exp () <FPARENTESES> <PONTOVIRGULA> |
  <RETURN> Exp () <PONTOVIRGULA> |
  <PRINT> <APARENTESES> Exp () <FPARENTESES> <PONTOVIRGULA>
}

void Comando2 () :
{}
{
  <ATRIB> Exp () <PONTOVIRGULA> |
  <APARENTESES> ListaExp () <FPARENTESES> <PONTOVIRGULA>
}

// EXP -> "(" EXP OP EXP ")" | FATOR
void Exp () :
{}
{
  <APARENTESES> Exp () <OP> Exp () <FPARENTESES> | Fator ()
}

// FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
// | TOKEN_numliteral | "true" | "false"
void Fator () :
{}
{
  <NUM> | <ID> Fator2 () | <TRUE> | <FALSE>
}

void Fator2 ():
{}
{
  <APARENTESES> ListaExp () <FPARENTESES> | {}
}

// LISTAEXP -> EXP | LISTAEXP "," EXP
void ListaExp () :
{}
{
  Exp () ListaExp2 ()
}

void ListaExp2 () :
{}
{
  <VIRGULA> Exp () ListaExp2 () | {}
}

// FUNC -> FUNC "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
void Func () :
{}
{
  <FUNC> Tipo () <ID> <APARENTESES> ListaArg () <FPARENTESES> <ACHAVES> 
  Vardecl () SeqComandos () <FCHAVES> Func2 ()
}

void Func2 () :
{}
{
  <FUNC> Tipo () <ID> <APARENTESES> ListaArg () <FPARENTESES> <ACHAVES> 
  Vardecl () SeqComandos () <FCHAVES> Func2 () | {}
}


// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
void ListaArg () :
{}
{
  Tipo () <ID> ListaArg2 () 
}

void ListaArg2 () :
{}
{
  <VIRGULA>  Tipo () <ID> ListaArg2 () | {}
}